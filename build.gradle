plugins {
    id 'java-library'
    id 'maven-publish'
    id 'jacoco'
}

allprojects {
    group = 'com.ring-ding-dong'
    version = '0.1.0'

    repositories {
        mavenCentral()
    }
}

def excludedProjects = [':sample', ':docs']

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(8)
        }
    }

    dependencies {
        testImplementation 'org.mockito:mockito-core:5.14.1'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.3'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    }

    tasks.named('test') {
        useJUnitPlatform()
        finalizedBy tasks.jacocoTestReport
    }


    tasks.named('jacocoTestReport') {
        reports {
            xml.required = true
            html.required = true
        }
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    tasks.withType(Javadoc).configureEach {
        options.encoding = 'UTF-8'
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                pom {
                    name = 'Jobserv'
                    description = 'Java Observability Toolkit'
                    url = 'https://github.com/ring-ding-dong/jobserv'
                    licenses {
                        license {
                            name = 'Apache-2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'chimaek'
                            name = 'Seung ju Kim'
                            email = 'pipiru100@gmail.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:git://github.com/ring-ding-dong/jobserv.git'
                        developerConnection = 'scm:git::ssh://github.com/ring-ding-dong/jobserv.git'
                        url = 'https://github.com/ring-ding-dong/jobserv'
                    }
                }
            }
        }
    }

    if (excludedProjects.contains(project.path)) {
        tasks.withType(Test).configureEach {
            enabled = false
        }
        tasks.withType(JacocoReport).configureEach {
            enabled = false
        }
    }
}

tasks.register('aggregateJavadoc', Javadoc) {
    title = "jobserv API Documentation"
    destinationDirectory.set(layout.buildDirectory.dir("docs/javadoc"))

    options.memberLevel = JavadocMemberLevel.PROTECTED
    options.author = true
    options.version = true
    options.header = "jobserv Library"
    options.use = true
    options.splitIndex = true

    source(subprojects.collect { project ->
        project.sourceSets.main.allJava
    })
    classpath = files(subprojects.collect { project ->
        project.sourceSets.main.compileClasspath
    })

    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
    exclude '**/internal/**'
}

tasks.register('jacocoRootReport', JacocoReport) {
    description = 'Generates an aggregate report from all subprojects'

    dependsOn(subprojects.test)

    sourceDirectories.from(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from(subprojects.sourceSets.main.output)
    executionData.from(subprojects.jacocoTestReport.executionData)

    reports {
        html.required = true
        xml.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect { fileTree(dir: it, exclude: excludedProjects.collect { proj -> "**/${proj.replace(':', '')}/**" }) }))
    }
}

javadoc {
    source = sourceSets.main.allJava
    options.memberLevel = JavadocMemberLevel.PROTECTED
}
